From f3f358d8e7504057e4379643ff12d219a0a276ef Mon Sep 17 00:00:00 2001
From: Luke Evans <luke.evans@gmail.com>
Date: Sat, 5 Jul 2025 11:18:30 -0700
Subject: [PATCH 9/9] Remove useless tests

---
 tls/test/integration/ocsp/OCSPTestServer.hs | 308 ---------------
 tls/test/integration/ocsp/README.md         | 210 ----------
 tls/test/integration/ocsp/run-ocsp-tests.sh | 412 --------------------
 3 files changed, 930 deletions(-)
 delete mode 100644 tls/test/integration/ocsp/OCSPTestServer.hs
 delete mode 100644 tls/test/integration/ocsp/README.md
 delete mode 100755 tls/test/integration/ocsp/run-ocsp-tests.sh

diff --git a/tls/test/integration/ocsp/OCSPTestServer.hs b/tls/test/integration/ocsp/OCSPTestServer.hs
deleted file mode 100644
index 74b8e4de..00000000
--- a/tls/test/integration/ocsp/OCSPTestServer.hs
+++ /dev/null
@@ -1,308 +0,0 @@
-{-# LANGUAGE OverloadedStrings #-}
-
--- | OCSP Stapling Integration Test Server
--- 
--- This module provides a test server that demonstrates OCSP stapling functionality
--- working correctly in both TLS 1.2 and TLS 1.3. It serves as proof that:
--- 
--- 1. OCSP hooks are called during TLS handshakes
--- 2. OCSP responses are correctly formatted and delivered to clients
--- 3. Both TLS 1.2 and TLS 1.3 protocols handle OCSP stapling properly
---
--- The server uses self-signed certificates and a pre-generated OCSP response
--- suitable for integration testing.
-
-module Main (main) where
-
-import Control.Concurrent
-import qualified Control.Exception as E
-import Control.Monad
-import qualified Data.ByteString as B
-import qualified Data.ByteString.Char8 as BC
-import qualified Data.ByteString.Lazy.Char8 as LC
-import Data.Default (def)
-import Data.IORef
-import Data.X509.CertificateStore
-import Network.Socket (accept, bind, close, listen, socket)
-import qualified Network.Socket as S
-import System.Console.GetOpt
-import System.Environment
-import System.Exit
-import System.IO
-import System.IO.Unsafe (unsafeDupablePerformIO)
-
-import Network.TLS hiding (TLS12, TLS13)
-import qualified Network.TLS as TLS
-import Network.TLS.Extra.Cipher
-import Network.TLS.X509 (CertificateChain(..))
-
--- | Test OCSP response (DER-encoded)
--- This is a valid OCSP response for testing purposes, generated with OpenSSL
-testOcspResponse :: B.ByteString
-testOcspResponse = B.pack [0x30, 0x82, 0x02, 0x0b, 0x0a, 0x01, 0x00, 0xa0, 0x82, 0x02, 0x04, 0x30, 0x82, 0x02, 0x00, 0x06, 
-    0x09, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x01, 0x04, 0x82, 0x01, 0xf1, 0x30, 0x82, 
-    0x01, 0xed, 0x30, 0x81, 0xd6, 0xa1, 0x38, 0x30, 0x36, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 
-    0x04, 0x03, 0x0c, 0x07, 0x54, 0x65, 0x73, 0x74, 0x2d, 0x43, 0x41, 0x31, 0x15, 0x30, 0x13, 0x06, 
-    0x03, 0x55, 0x04, 0x0a, 0x0c, 0x0c, 0x4f, 0x43, 0x53, 0x50, 0x2d, 0x54, 0x65, 0x73, 0x74, 0x2d, 
-    0x43, 0x41, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x18, 
-    0x0f, 0x32, 0x30, 0x32, 0x35, 0x30, 0x37, 0x30, 0x35, 0x30, 0x36, 0x31, 0x37, 0x32, 0x33, 0x5a, 
-    0x30, 0x64, 0x30, 0x62, 0x30, 0x4d, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 
-    0x00, 0x04, 0x14, 0x4a, 0x71, 0x94, 0xc5, 0x18, 0x1b, 0x30, 0xd8, 0x0b, 0x03, 0x2d, 0xc4, 0x32, 
-    0xd6, 0x36, 0x48, 0x0c, 0xe1, 0xfc, 0x31, 0x04, 0x14, 0xa8, 0x15, 0x5c, 0x12, 0xc6, 0xed, 0x21, 
-    0x51, 0x1a, 0x8c, 0xe5, 0xf6, 0xb8, 0x3a, 0xac, 0x98, 0x6b, 0x30, 0xd3, 0xa3, 0x02, 0x14, 0x32, 
-    0x13, 0xfd, 0x34, 0x41, 0xd2, 0xad, 0x0a, 0xcc, 0x9a, 0x9e, 0xc9, 0x25, 0x1a, 0x93, 0x64, 0xcb, 
-    0x9b, 0x39, 0x97, 0x80, 0x00, 0x18, 0x0f, 0x32, 0x30, 0x32, 0x35, 0x30, 0x37, 0x30, 0x35, 0x30, 
-    0x36, 0x31, 0x37, 0x32, 0x33, 0x5a, 0xa1, 0x23, 0x30, 0x21, 0x30, 0x1f, 0x06, 0x09, 0x2b, 0x06, 
-    0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x02, 0x04, 0x12, 0x04, 0x10, 0xe0, 0x4c, 0x91, 0x4d, 0x76, 
-    0x49, 0x53, 0x94, 0x56, 0xa4, 0xf2, 0x91, 0x71, 0xf1, 0x0a, 0x6e, 0x30, 0x0d, 0x06, 0x09, 0x2a, 
-    0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x41, 
-    0xd5, 0x69, 0xd1, 0xa7, 0xab, 0x08, 0x8d, 0x52, 0x84, 0x23, 0xa3, 0xa7, 0x53, 0xcd, 0x06, 0xcd, 
-    0xb7, 0x7a, 0x21, 0x0e, 0xeb, 0xbe, 0x53, 0x40, 0x54, 0x47, 0x8a, 0x28, 0x2c, 0x3b, 0x4a, 0x69, 
-    0x96, 0x42, 0xb2, 0x0e, 0xbb, 0xf0, 0x40, 0x57, 0xc5, 0xc1, 0xe4, 0x0b, 0x3a, 0xbb, 0xce, 0xa2, 
-    0xfb, 0x5f, 0x8e, 0x2a, 0x09, 0x50, 0x35, 0xb2, 0xd8, 0x7c, 0x02, 0xf8, 0x0b, 0x13, 0x5d, 0xc1, 
-    0xc7, 0x80, 0xbd, 0x2c, 0xb5, 0xea, 0x82, 0x60, 0x72, 0xcb, 0xcf, 0x98, 0xcf, 0xe3, 0x54, 0x2f, 
-    0x05, 0x61, 0x44, 0x07, 0x59, 0x33, 0x5d, 0x46, 0x58, 0x17, 0x9e, 0x03, 0x76, 0xb6, 0xc2, 0x2f, 
-    0xef, 0x80, 0x6c, 0xd6, 0x4f, 0x46, 0xe4, 0x87, 0xa1, 0x00, 0x34, 0x9c, 0x18, 0xf6, 0x48, 0x08, 
-    0xb0, 0xd4, 0xfb, 0xe2, 0x97, 0xec, 0xb9, 0xa2, 0x6e, 0x88, 0x4a, 0x0a, 0x7f, 0x83, 0x7b, 0x3a, 
-    0x94, 0x3d, 0x0c, 0x25, 0x42, 0xc2, 0x4a, 0x5d, 0x8a, 0xb0, 0x49, 0x32, 0x7f, 0x94, 0xee, 0xec, 
-    0x19, 0xab, 0x36, 0xfe, 0x71, 0x69, 0x5d, 0x62, 0x2f, 0x8c, 0x38, 0xfd, 0x6b, 0x4d, 0x0a, 0xcd, 
-    0xbd, 0x15, 0xaf, 0xbf, 0xce, 0xe8, 0x93, 0xcc, 0x1c, 0xac, 0x9a, 0xb6, 0x6f, 0xdd, 0xc3, 0x9a, 
-    0xe1, 0x5a, 0x7f, 0x78, 0xec, 0x4a, 0x99, 0xa2, 0x0a, 0x6e, 0x93, 0x76, 0x15, 0xc4, 0x59, 0x20, 
-    0x22, 0x61, 0x19, 0xef, 0xa0, 0xe3, 0x4a, 0x7b, 0x9d, 0xca, 0x4a, 0xd2, 0xed, 0xe9, 0xdd, 0x6f, 
-    0x8d, 0x9b, 0xc6, 0xc8, 0xc2, 0x40, 0xc5, 0x7a, 0x63, 0xdf, 0xa0, 0x1e, 0x07, 0xf2, 0x7e, 0x61, 
-    0x12, 0x11, 0x71, 0x39, 0xeb, 0x35, 0x43, 0xb6, 0xc9, 0xeb, 0x3b, 0x48, 0x5d, 0xd3, 0xdb, 0xbc, 
-    0x9f, 0xd5, 0x7a, 0x84, 0x6d, 0x20, 0x65, 0x1c, 0x00, 0x93, 0x39, 0x95, 0x43, 0x82, 0xa4]
-
--- | Hook call counter for testing verification
--- NOTE: Using unsafePerformIO is acceptable in test code for simple counters
-hookCallCounter :: IORef Int
-{-# NOINLINE hookCallCounter #-}
-hookCallCounter = unsafeDupablePerformIO $ newIORef 0
-
--- | OCSP hook implementation for testing
--- Returns the test OCSP response and logs the call for verification
-ocspHook :: CertificateChain -> Maybe String -> IO (Maybe B.ByteString)
-ocspHook (CertificateChain certs) sni = do
-    count <- atomicModifyIORef hookCallCounter (\n -> (n+1, n+1))
-    
-    putStrLn ""
-    putStrLn $ "*** OCSP HOOK CALLED (Call #" ++ show count ++ ") ***"
-    putStrLn $ "    SNI hostname: " ++ show sni
-    putStrLn $ "    Certificate chain length: " ++ show (length certs)
-    putStrLn $ "    Providing OCSP response: " ++ show (B.length testOcspResponse) ++ " bytes"
-    putStrLn $ "    Response type: Raw DER (library handles TLS wrapping)"
-    putStrLn ""
-    
-    return $ Just testOcspResponse
-
--- | Simple HTTP response for testing
-httpResponse :: LC.ByteString
-httpResponse = "HTTP/1.1 200 OK\r\n\
-              \Content-Type: text/html\r\n\
-              \Content-Length: 89\r\n\
-              \\r\n\
-              \<html><body>\
-              \<h1>OCSP Test Server</h1>\
-              \<p>TLS handshake with OCSP stapling worked!</p>\
-              \</body></html>"
-
--- | Server configuration
-data ServerConfig = ServerConfig
-    { configPort :: Int
-    , configTlsVersion :: Maybe TLS.Version
-    , configCertFile :: String
-    , configKeyFile :: String
-    , configVerbose :: Bool
-    }
-
--- | Default configuration
-defaultConfig :: ServerConfig
-defaultConfig = ServerConfig
-    { configPort = 4443
-    , configTlsVersion = Nothing  -- Support both TLS 1.2 and 1.3
-    , configCertFile = "certs/server.crt"
-    , configKeyFile = "certs/server.key"
-    , configVerbose = False
-    }
-
--- | Command line flags
-data Flag 
-    = Port String
-    | TLS12
-    | TLS13
-    | Certificate String
-    | Key String
-    | Verbose
-    | Help
-    deriving (Show, Eq)
-
--- | Command line options
-options :: [OptDescr Flag]
-options = 
-    [ Option ['p'] ["port"] (ReqArg Port "PORT") "Port to listen on (default: 4443)"
-    , Option [] ["tls12"] (NoArg TLS12) "Force TLS 1.2 only"
-    , Option [] ["tls13"] (NoArg TLS13) "Force TLS 1.3 only"
-    , Option [] ["certificate"] (ReqArg Certificate "FILE") "Certificate file"
-    , Option [] ["key"] (ReqArg Key "FILE") "Private key file"
-    , Option ['v'] ["verbose"] (NoArg Verbose) "Enable verbose output"
-    , Option ['h'] ["help"] (NoArg Help) "Show this help"
-    ]
-
--- | Parse command line flags into configuration
-parseConfig :: [Flag] -> ServerConfig
-parseConfig flags = foldl applyFlag defaultConfig flags
-  where
-    applyFlag config flag = case flag of
-        Port p -> config { configPort = read p }
-        TLS12 -> config { configTlsVersion = Just TLS.TLS12 }
-        TLS13 -> config { configTlsVersion = Just TLS.TLS13 }
-        Certificate f -> config { configCertFile = f }
-        Key f -> config { configKeyFile = f }
-        Verbose -> config { configVerbose = True }
-        _ -> config
-
--- | Create server parameters with OCSP hook
-createServerParams :: ServerConfig -> Credential -> IO ServerParams
-createServerParams config cred = do
-    when (configVerbose config) $ putStrLn "Creating ServerParams with OCSP hook..."
-    
-    let certStore = makeCertificateStore []
-    
-    let supportedVersions = case configTlsVersion config of
-            Just v -> [v]
-            Nothing -> [TLS.TLS13, TLS.TLS12]
-            
-        params = def 
-            { serverWantClientCert = False
-            , serverCACertificates = []
-            , serverShared = def
-                { sharedCAStore = certStore  
-                , sharedCredentials = Credentials [cred]
-                }
-            , serverSupported = def
-                { supportedVersions = supportedVersions
-                , supportedCiphers = ciphersuite_default
-                }
-            , serverHooks = def
-                { onCertificateStatus = ocspHook
-                }
-            }
-    
-    when (configVerbose config) $ do
-        putStrLn "OCSP hook registered in ServerParams"
-        putStrLn $ "Supported TLS versions: " ++ show supportedVersions
-    return params
-
--- | Handle a client connection
-handleClient :: ServerConfig -> ServerParams -> S.Socket -> IO ()
-handleClient config params sock = do
-    (clientSock, clientAddr) <- accept sock
-    when (configVerbose config) $ 
-        putStrLn $ "Incoming connection from: " ++ show clientAddr
-    
-    void $ forkIO $ do
-        ctx <- contextNew clientSock params
-        
-        E.handle (\e -> putStrLn $ "Client error: " ++ show (e :: E.SomeException)) $ do
-            when (configVerbose config) $ putStrLn "Starting TLS handshake..."
-            
-            -- Reset hook counter before handshake
-            writeIORef hookCallCounter 0
-            
-            -- Perform TLS handshake
-            handshake ctx
-            
-            -- Check hook call results
-            hookCalls <- readIORef hookCallCounter
-            putStrLn $ "TLS Handshake completed! OCSP hook called " ++ show hookCalls ++ " times"
-            
-            -- Get handshake information
-            info <- contextGetInformation ctx
-            case info of
-                Nothing -> putStrLn "No handshake information available"
-                Just i -> do
-                    putStrLn $ "TLS Version: " ++ show (infoVersion i)
-                    putStrLn $ "Cipher Suite: " ++ show (infoCipher i)
-            
-            -- Handle HTTP request
-            when (configVerbose config) $ putStrLn "Waiting for HTTP request..."
-            request <- recvData ctx
-            unless (B.null request) $ do
-                when (configVerbose config) $ 
-                    putStrLn $ "Request: " ++ show (B.take 50 request) ++ "..."
-                    
-                sendData ctx httpResponse
-                when (configVerbose config) $ putStrLn "Sent HTTP response"
-            
-            -- Clean shutdown
-            bye ctx
-            when (configVerbose config) $ putStrLn "Connection closed cleanly"
-            
-        `E.finally` close clientSock
-
--- | Load server credentials
-loadCredentials :: ServerConfig -> IO Credential
-loadCredentials config = do
-    when (configVerbose config) $ do
-        putStrLn $ "Loading certificate: " ++ configCertFile config
-        putStrLn $ "Loading private key: " ++ configKeyFile config
-    
-    result <- credentialLoadX509 (configCertFile config) (configKeyFile config)
-    case result of
-        Left err -> error $ "Failed to load credentials: " ++ err
-        Right cred -> do
-            when (configVerbose config) $ putStrLn "Credentials loaded successfully"
-            return cred
-
--- | Main server loop
-runServer :: ServerConfig -> IO ()
-runServer config = do
-    putStrLn "OCSP Stapling Test Server"
-    putStrLn "========================="
-    
-    -- Load credentials
-    cred <- loadCredentials config
-    
-    -- Create server parameters with OCSP hook
-    params <- createServerParams config cred
-    
-    -- Create and bind socket
-    sock <- socket S.AF_INET S.Stream S.defaultProtocol
-    S.setSocketOption sock S.ReuseAddr 1
-    bind sock (S.SockAddrInet (fromIntegral $ configPort config) 0)
-    listen sock 5
-    
-    putStrLn $ "Server listening on port " ++ show (configPort config)
-    case configTlsVersion config of
-        Just v -> putStrLn $ "TLS Version: " ++ show v ++ " only"
-        Nothing -> putStrLn "TLS Versions: TLS 1.3 and TLS 1.2"
-    putStrLn ""
-    putStrLn "Test commands:"
-    putStrLn $ "  TLS 1.2: openssl s_client -connect localhost:" ++ show (configPort config) ++ " -tls1_2 -status"
-    putStrLn $ "  TLS 1.3: openssl s_client -connect localhost:" ++ show (configPort config) ++ " -tls1_3 -status"
-    putStrLn ""
-    
-    -- Accept connections forever
-    (forever $ handleClient config params sock)
-        `E.finally` close sock
-
--- | Print usage information
-printUsage :: IO ()
-printUsage = putStrLn $ usageInfo "OCSP Stapling Test Server\n" options
-
--- | Main entry point
-main :: IO ()
-main = do
-    args <- getArgs
-    let (flags, _, errs) = getOpt Permute options args
-    
-    unless (null errs) $ do
-        mapM_ putStrLn errs
-        exitFailure
-    
-    when (Help `elem` flags) $ do
-        printUsage
-        exitSuccess
-    
-    let config = parseConfig flags
-    runServer config
\ No newline at end of file
diff --git a/tls/test/integration/ocsp/README.md b/tls/test/integration/ocsp/README.md
deleted file mode 100644
index 2eaae9f6..00000000
--- a/tls/test/integration/ocsp/README.md
+++ /dev/null
@@ -1,210 +0,0 @@
-# OCSP Stapling Integration Tests
-
-This directory contains comprehensive integration tests for OCSP (Online Certificate Status Protocol) stapling functionality in the hs-tls library.
-
-## Overview
-
-OCSP stapling allows TLS servers to provide certificate status information during the handshake, improving performance and privacy compared to clients making separate OCSP requests. This test suite verifies that:
-
-1. **OCSP hooks are called correctly** during TLS handshakes
-2. **OCSP responses are properly formatted** according to RFC 6066 and RFC 8446
-3. **Both TLS 1.2 and TLS 1.3** handle OCSP stapling correctly
-4. **OpenSSL clients accept responses** without protocol errors
-
-## Test Components
-
-### OCSPTestServer.hs
-
-A comprehensive test server that:
-
-- Implements the `onCertificateStatus` hook to provide OCSP responses
-- Supports both TLS 1.2 and TLS 1.3 (configurable)
-- Logs hook calls for verification
-- Returns a valid test OCSP response
-- Serves simple HTTP responses for end-to-end testing
-
-Key features:
-- Hook call counting for verification
-- Verbose logging of handshake details
-- Self-signed certificate support for testing
-- Command-line configuration options
-
-### run-ocsp-tests.sh
-
-An automated test script that:
-
-- Generates test certificates automatically
-- Compiles the test server
-- Runs comprehensive tests for both TLS versions
-- Uses OpenSSL clients to verify OCSP delivery
-- Provides detailed pass/fail reporting
-- Cleans up test artifacts
-
-## Usage
-
-### Quick Test
-
-Run all tests (recommended):
-
-```bash
-./run-ocsp-tests.sh
-```
-
-### Specific TLS Version
-
-Test only TLS 1.2:
-```bash
-./run-ocsp-tests.sh --tls12-only
-```
-
-Test only TLS 1.3:
-```bash
-./run-ocsp-tests.sh --tls13-only
-```
-
-### Manual Testing
-
-Start the server manually:
-```bash
-cd tls/test/integration/ocsp
-ghc -package-db=../../../dist-newstyle/packagedb/ghc-* OCSPTestServer.hs
-./OCSPTestServer --verbose
-```
-
-Test with OpenSSL:
-```bash
-# TLS 1.2
-echo "GET / HTTP/1.1\r\nHost: localhost\r\n\r\n" | \
-  openssl s_client -connect localhost:4443 -tls1_2 -status -CAfile certs/ca.crt
-
-# TLS 1.3  
-echo "GET / HTTP/1.1\r\nHost: localhost\r\n\r\n" | \
-  openssl s_client -connect localhost:4443 -tls1_3 -status -CAfile certs/ca.crt
-```
-
-## Test Validation
-
-The tests verify:
-
-### 1. Hook Execution
-- Server logs show "OCSP HOOK CALLED" messages
-- Hook call counter increments correctly
-- Hook receives correct certificate chain and SNI information
-
-### 2. OCSP Delivery
-- OpenSSL client output contains "OCSP response:" section
-- Response contains valid DER-encoded OCSP data
-- No "unsupported status type" or format errors
-
-### 3. Protocol Compliance
-- No TLS alerts or handshake failures
-- Clean handshake completion
-- Proper message sequencing in both TLS versions
-
-### 4. TLS Version Differences
-- **TLS 1.2**: OCSP delivered via separate CertificateStatus message
-- **TLS 1.3**: OCSP delivered as certificate extension
-
-## Technical Details
-
-### OCSP Response Format
-
-The test server returns a raw DER-encoded OCSP response. The hs-tls library handles the TLS protocol wrapping:
-
-- **TLS 1.2**: Wraps in CertificateStatus message with 24-bit length field
-- **TLS 1.3**: Wraps in certificate extension with proper encoding
-
-### Certificate Chain
-
-Uses self-signed certificates for testing:
-- CA certificate and key for signing
-- Server certificate signed by the test CA
-- All certificates include appropriate extensions
-
-### Known Limitations
-
-- Uses self-signed certificates (expect certificate verification warnings)
-- OCSP response is static (not a real OCSP responder)
-- Timeout handling for test reliability
-
-## Expected Output
-
-### Successful Test Run
-
-```
-[INFO] Starting OCSP Stapling Integration Tests
-[INFO] Setting up test directories...
-[INFO] Generating test certificates...
-[SUCCESS] Certificates ready
-[INFO] Compiling OCSP test server...
-[SUCCESS] Test server compiled
-
-=== Testing TLS 1.2 ===
-[INFO] Starting OCSP test server (TLS version: 1.2)...
-[SUCCESS] Server started (PID: 12345)
-[INFO] Testing TLS 1.2 OCSP Stapling...
-
-=== TLS 1.2 OCSP Stapling Results ===
-[SUCCESS] ✓ OCSP hook was called
-[SUCCESS] ✓ OCSP response was delivered to client  
-[SUCCESS] ✓ Clean TLS handshake (no alerts/errors)
-[SUCCESS] ✓ TLS 1.2 OCSP Stapling: PASSED
-
-=== Testing TLS 1.3 ===
-[INFO] Starting OCSP test server (TLS version: 1.3)...
-[SUCCESS] Server started (PID: 12346)
-[INFO] Testing TLS 1.3 OCSP Stapling...
-
-=== TLS 1.3 OCSP Stapling Results ===
-[SUCCESS] ✓ OCSP hook was called
-[SUCCESS] ✓ OCSP response was delivered to client
-[SUCCESS] ✓ Clean TLS handshake (no alerts/errors)  
-[SUCCESS] ✓ TLS 1.3 OCSP Stapling: PASSED
-
-===========================================
-OCSP Stapling Integration Test Results
-===========================================
-[SUCCESS] All tests PASSED! 🎉
-[SUCCESS] OCSP stapling is working correctly in both TLS 1.2 and TLS 1.3
-```
-
-## Troubleshooting
-
-### Compilation Issues
-
-If compilation fails:
-1. Ensure the hs-tls library is built: `cabal build tls`
-2. Check that required dependencies are available
-3. Try using `ghc` directly with explicit package database paths
-
-### Connection Issues
-
-If tests fail with connection errors:
-1. Check that no other service is using the test port
-2. Verify firewall settings allow localhost connections
-3. Try a different port: `./run-ocsp-tests.sh --port 14444`
-
-### OCSP Delivery Issues
-
-If OCSP responses aren't delivered:
-1. Check server logs for hook call messages
-2. Verify certificate files are valid
-3. Ensure OpenSSL version supports OCSP stapling
-
-## Integration with CI/CD
-
-This test suite can be integrated into continuous integration:
-
-```bash
-# In CI script
-cd tls/test/integration/ocsp
-./run-ocsp-tests.sh
-```
-
-The script returns appropriate exit codes for CI systems.
-
-## References
-
-- [RFC 6066: Transport Layer Security (TLS) Extensions](https://tools.ietf.org/html/rfc6066)
-- [RFC 8446: The Transport Layer Security (TLS) Protocol Version 1.3](https://tools.ietf.org/html/rfc8446)
-- [RFC 6960: Online Certificate Status Protocol - OCSP](https://tools.ietf.org/html/rfc6960)
\ No newline at end of file
diff --git a/tls/test/integration/ocsp/run-ocsp-tests.sh b/tls/test/integration/ocsp/run-ocsp-tests.sh
deleted file mode 100755
index 10eb623d..00000000
--- a/tls/test/integration/ocsp/run-ocsp-tests.sh
+++ /dev/null
@@ -1,412 +0,0 @@
-#!/bin/bash
-
-# OCSP Stapling Integration Test Suite
-# 
-# This script provides comprehensive testing of OCSP stapling functionality
-# in the hs-tls library. It verifies that:
-#
-# 1. OCSP hooks are called during TLS handshakes
-# 2. OCSP responses are correctly formatted and delivered
-# 3. Both TLS 1.2 and TLS 1.3 handle OCSP stapling properly
-# 4. OpenSSL clients accept the OCSP responses without errors
-
-set -e
-
-# Configuration
-TEST_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
-SERVER_PORT=14443
-SERVER_PID=""
-CERT_DIR="$TEST_DIR/certs"
-LOG_DIR="$TEST_DIR/logs"
-TIMEOUT=10
-
-# Colors for output
-RED='\033[0;31m'
-GREEN='\033[0;32m'
-YELLOW='\033[1;33m'
-BLUE='\033[0;34m'
-NC='\033[0m' # No Color
-
-# Logging functions
-log_info() {
-    echo -e "${BLUE}[INFO]${NC} $1"
-}
-
-log_success() {
-    echo -e "${GREEN}[SUCCESS]${NC} $1"
-}
-
-log_warning() {
-    echo -e "${YELLOW}[WARNING]${NC} $1"
-}
-
-log_error() {
-    echo -e "${RED}[ERROR]${NC} $1"
-}
-
-# Cleanup function
-cleanup() {
-    if [[ -n "$SERVER_PID" ]]; then
-        log_info "Stopping test server (PID: $SERVER_PID)..."
-        kill $SERVER_PID 2>/dev/null || true
-        wait $SERVER_PID 2>/dev/null || true
-    fi
-    
-    # Clean up any remaining processes
-    pkill -f "OCSPTestServer" 2>/dev/null || true
-}
-
-# Set up trap for cleanup
-trap cleanup EXIT
-
-# Create necessary directories
-setup_directories() {
-    log_info "Setting up test directories..."
-    mkdir -p "$CERT_DIR"
-    mkdir -p "$LOG_DIR"
-}
-
-# Generate test certificates
-generate_certificates() {
-    log_info "Generating test certificates..."
-    
-    cd "$CERT_DIR"
-    
-    # Generate CA key and certificate
-    if [[ ! -f ca.key || ! -f ca.crt ]]; then
-        log_info "Generating CA certificate..."
-        openssl genrsa -out ca.key 2048
-        openssl req -new -x509 -key ca.key -out ca.crt -days 365 -subj "/C=US/O=OCSP-Test-CA/CN=Test-CA"
-    fi
-    
-    # Generate server key and certificate
-    if [[ ! -f server.key || ! -f server.crt ]]; then
-        log_info "Generating server certificate..."
-        openssl genrsa -out server.key 2048
-        openssl req -new -key server.key -out server.csr -subj "/C=US/O=Test-Server/CN=localhost"
-        openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt -days 365
-        rm server.csr
-    fi
-    
-    cd "$TEST_DIR"
-    log_success "Certificates ready"
-}
-
-# Compile the test server
-compile_server() {
-    log_info "Compiling OCSP test server..."
-    
-    cd "$TEST_DIR"
-    
-    # Use stack to compile if available, otherwise try cabal, finally ghc
-    if command -v stack &> /dev/null && [[ -f "../../../stack.yaml" ]]; then
-        log_info "Using stack to compile..."
-        cd ../../..
-        stack ghc -- test/integration/ocsp/OCSPTestServer.hs -o test/integration/ocsp/OCSPTestServer -threaded -rtsopts 2>&1 | tee "$TEST_DIR/$LOG_DIR/compile.log"
-        cd "$TEST_DIR"
-        EXECUTABLE="./OCSPTestServer"
-    elif command -v cabal &> /dev/null; then
-        log_info "Using cabal to compile..."
-        cd ../../..
-        cabal exec -- ghc test/integration/ocsp/OCSPTestServer.hs -o test/integration/ocsp/OCSPTestServer -threaded -rtsopts 2>&1 | tee "$TEST_DIR/$LOG_DIR/compile.log"
-        cd "$TEST_DIR"
-        EXECUTABLE="./OCSPTestServer"
-    else
-        log_error "Neither stack nor cabal found - cannot compile test server"
-        return 1
-    fi
-    
-    if [[ ! -f "$EXECUTABLE" ]]; then
-        log_error "Failed to compile test server"
-        return 1
-    fi
-    
-    log_success "Test server compiled: $EXECUTABLE"
-}
-
-# Start the test server
-start_server() {
-    local tls_version="$1"
-    
-    log_info "Starting OCSP test server (TLS version: $tls_version)..."
-    
-    cd "$TEST_DIR"
-    
-    local version_flag=""
-    if [[ "$tls_version" == "1.2" ]]; then
-        version_flag="--tls12"
-    elif [[ "$tls_version" == "1.3" ]]; then
-        version_flag="--tls13"
-    fi
-    
-    # Start server in background
-    $EXECUTABLE --port $SERVER_PORT $version_flag --verbose \
-        --certificate "$CERT_DIR/server.crt" \
-        --key "$CERT_DIR/server.key" \
-        > "$LOG_DIR/server-$tls_version.log" 2>&1 &
-    
-    SERVER_PID=$!
-    
-    # Wait for server to start
-    sleep 2
-    
-    # Check if server is running
-    if ! kill -0 $SERVER_PID 2>/dev/null; then
-        log_error "Server failed to start"
-        cat "$LOG_DIR/server-$tls_version.log"
-        return 1
-    fi
-    
-    log_success "Server started (PID: $SERVER_PID)"
-}
-
-# Test TLS connection with OpenSSL
-test_tls_connection() {
-    local tls_version="$1"
-    local test_name="TLS $tls_version OCSP Stapling"
-    
-    log_info "Testing $test_name..."
-    
-    local openssl_version=""
-    if [[ "$tls_version" == "1.2" ]]; then
-        openssl_version="-tls1_2"
-    elif [[ "$tls_version" == "1.3" ]]; then
-        openssl_version="-tls1_3"
-    fi
-    
-    # Run OpenSSL client test
-    local output_file="$LOG_DIR/client-$tls_version.log"
-    
-    # Test with OCSP status request
-    echo -e "GET / HTTP/1.1\r\nHost: localhost\r\nConnection: close\r\n\r\n" | \
-        timeout $TIMEOUT openssl s_client \
-            -connect localhost:$SERVER_PORT \
-            $openssl_version \
-            -status \
-            -verify_return_error \
-            -CAfile "$CERT_DIR/ca.crt" \
-            > "$output_file" 2>&1
-    
-    local client_exit_code=$?
-    
-    # Analyze results
-    local hook_called=false
-    local ocsp_delivered=false
-    local clean_handshake=false
-    
-    # Check server logs for hook calls
-    if grep -q "OCSP HOOK CALLED" "$LOG_DIR/server-$tls_version.log"; then
-        hook_called=true
-    fi
-    
-    # Check client output for OCSP response
-    if grep -q "OCSP response:" "$output_file"; then
-        ocsp_delivered=true
-    fi
-    
-    # Check for clean handshake (no alerts or errors)
-    if grep -qE "(alert|error|fail)" "$output_file"; then
-        clean_handshake=false
-    else
-        clean_handshake=true
-    fi
-    
-    # Report results
-    echo
-    echo "=== $test_name Results ==="
-    
-    if $hook_called; then
-        log_success "✓ OCSP hook was called"
-    else
-        log_error "✗ OCSP hook was NOT called"
-    fi
-    
-    if $ocsp_delivered; then
-        log_success "✓ OCSP response was delivered to client"
-    else
-        log_error "✗ OCSP response was NOT delivered"
-    fi
-    
-    if $clean_handshake; then
-        log_success "✓ Clean TLS handshake (no alerts/errors)"
-    else
-        log_warning "⚠ TLS handshake had warnings/errors"
-    fi
-    
-    # Overall test result
-    if $hook_called && $ocsp_delivered && $clean_handshake; then
-        log_success "✓ $test_name: PASSED"
-        return 0
-    else
-        log_error "✗ $test_name: FAILED"
-        echo
-        echo "Server log excerpt:"
-        tail -20 "$LOG_DIR/server-$tls_version.log" || true
-        echo
-        echo "Client log excerpt:"
-        tail -20 "$output_file" || true
-        return 1
-    fi
-}
-
-# Run a single test
-run_single_test() {
-    local tls_version="$1"
-    
-    log_info "=== Testing TLS $tls_version ==="
-    
-    # Start server for this TLS version
-    start_server "$tls_version"
-    
-    # Run the test
-    if test_tls_connection "$tls_version"; then
-        log_success "TLS $tls_version test PASSED"
-        local result=0
-    else
-        log_error "TLS $tls_version test FAILED"
-        local result=1
-    fi
-    
-    # Stop server
-    if [[ -n "$SERVER_PID" ]]; then
-        kill $SERVER_PID 2>/dev/null || true
-        wait $SERVER_PID 2>/dev/null || true
-        SERVER_PID=""
-    fi
-    
-    return $result
-}
-
-# Main test function
-run_all_tests() {
-    log_info "Starting OCSP Stapling Integration Tests"
-    log_info "========================================="
-    
-    # Setup
-    setup_directories
-    generate_certificates
-    compile_server
-    
-    # Run tests
-    local failed_tests=0
-    
-    log_info ""
-    if ! run_single_test "1.2"; then
-        ((failed_tests++))
-    fi
-    
-    sleep 2
-    
-    log_info ""
-    if ! run_single_test "1.3"; then
-        ((failed_tests++))
-    fi
-    
-    # Final results
-    echo
-    echo "==========================================="
-    echo "OCSP Stapling Integration Test Results"
-    echo "==========================================="
-    
-    if [[ $failed_tests -eq 0 ]]; then
-        log_success "All tests PASSED! 🎉"
-        log_success "OCSP stapling is working correctly in both TLS 1.2 and TLS 1.3"
-        return 0
-    else
-        log_error "$failed_tests test(s) FAILED"
-        log_error "Check the logs in $LOG_DIR for details"
-        return 1
-    fi
-}
-
-# Help function
-show_help() {
-    cat << EOF
-OCSP Stapling Integration Test Suite
-
-Usage: $0 [OPTIONS]
-
-Options:
-    --help          Show this help message
-    --clean         Clean up generated files and exit
-    --tls12-only    Test only TLS 1.2
-    --tls13-only    Test only TLS 1.3
-    --port PORT     Use custom port (default: $SERVER_PORT)
-    --verbose       Enable verbose output
-
-Examples:
-    $0                  # Run all tests
-    $0 --tls12-only     # Test only TLS 1.2
-    $0 --clean          # Clean up files
-
-This test suite verifies that OCSP stapling works correctly by:
-1. Generating test certificates
-2. Starting a test server with OCSP hooks
-3. Testing with OpenSSL clients
-4. Verifying hook calls and OCSP delivery
-EOF
-}
-
-# Clean up function
-clean_up() {
-    log_info "Cleaning up test files..."
-    
-    # Stop any running servers
-    cleanup
-    
-    # Remove generated files
-    rm -rf "$CERT_DIR"
-    rm -rf "$LOG_DIR"
-    rm -f "$TEST_DIR/ocsp-test.cabal"
-    rm -f "$TEST_DIR/OCSPTestServer"
-    rm -f "$TEST_DIR"/*.hi
-    rm -f "$TEST_DIR"/*.o
-    
-    log_success "Cleanup complete"
-}
-
-# Parse command line arguments
-while [[ $# -gt 0 ]]; do
-    case $1 in
-        --help)
-            show_help
-            exit 0
-            ;;
-        --clean)
-            clean_up
-            exit 0
-            ;;
-        --tls12-only)
-            log_info "Running TLS 1.2 test only"
-            setup_directories
-            generate_certificates
-            compile_server
-            run_single_test "1.2"
-            exit $?
-            ;;
-        --tls13-only)
-            log_info "Running TLS 1.3 test only"
-            setup_directories
-            generate_certificates
-            compile_server
-            run_single_test "1.3"
-            exit $?
-            ;;
-        --port)
-            SERVER_PORT="$2"
-            shift
-            ;;
-        --verbose)
-            set -x
-            ;;
-        *)
-            log_error "Unknown option: $1"
-            show_help
-            exit 1
-            ;;
-    esac
-    shift
-done
-
-# Run the main test suite
-run_all_tests
\ No newline at end of file
-- 
2.50.0


From 70b908797f69c814a494ebc357425e7faa9b58ec Mon Sep 17 00:00:00 2001
From: Luke Evans <luke.evans@gmail.com>
Date: Wed, 2 Jul 2025 16:32:34 -0700
Subject: [PATCH 5/9] FIx protocol

---
 tls/Network/TLS/Credentials.hs             |  6 +++---
 tls/Network/TLS/Handshake/Server/Common.hs | 17 +++++++++--------
 2 files changed, 12 insertions(+), 11 deletions(-)

diff --git a/tls/Network/TLS/Credentials.hs b/tls/Network/TLS/Credentials.hs
index ad45f5b5..b6b579b5 100644
--- a/tls/Network/TLS/Credentials.hs
+++ b/tls/Network/TLS/Credentials.hs
@@ -146,13 +146,13 @@ credentialCanSign (chain, priv) =
             cert = getCertificate signed
             pub = certPubKey cert
 
-credentialPublicPrivateKeys :: Credential -> (PubKey, PrivKey)
+credentialPublicPrivateKeys :: Credential -> Maybe (PubKey, PrivKey)
 credentialPublicPrivateKeys (chain, priv) = 
     case getCertificateChainLeaf chain of
         Just signed -> let cert = getCertificate signed
                            pub = certPubKey cert
-                       in pub `seq` (pub, priv)
-        Nothing -> error "credentialPublicPrivateKeys: empty certificate chain"
+                       in Just (pub `seq` (pub, priv))
+        Nothing -> Nothing  -- empty certificate chain
 
 getHashSignature :: SignedCertificate -> Maybe TLS.HashAndSignatureAlgorithm
 getHashSignature signed =
diff --git a/tls/Network/TLS/Handshake/Server/Common.hs b/tls/Network/TLS/Handshake/Server/Common.hs
index 2d318d08..9e16c767 100644
--- a/tls/Network/TLS/Handshake/Server/Common.hs
+++ b/tls/Network/TLS/Handshake/Server/Common.hs
@@ -44,11 +44,12 @@ checkValidClientCertChain ctx errmsg = do
             | otherwise -> return cc
 
 credentialDigitalSignatureKey :: Credential -> Maybe PubKey
-credentialDigitalSignatureKey cred
-    | isDigitalSignaturePair keys = Just pubkey
-    | otherwise = Nothing
-  where
-    keys@(pubkey, _) = credentialPublicPrivateKeys cred
+credentialDigitalSignatureKey cred =
+    case credentialPublicPrivateKeys cred of
+        Nothing -> Nothing  -- empty certificate chain
+        Just keys@(pubkey, _)
+            | isDigitalSignaturePair keys -> Just pubkey
+            | otherwise -> Nothing
 
 filterCredentials :: (Credential -> Bool) -> Credentials -> Credentials
 filterCredentials p (Credentials l) = Credentials (filter p l)
@@ -69,9 +70,9 @@ makeCredentialPredicate ver exts
 
 isCredentialAllowed :: Version -> (Group -> Bool) -> Credential -> Bool
 isCredentialAllowed ver p cred =
-    pubkey `versionCompatible` ver && satisfiesEcPredicate p pubkey
-  where
-    (pubkey, _) = credentialPublicPrivateKeys cred
+    case credentialPublicPrivateKeys cred of
+        Nothing -> False  -- empty certificate chain not allowed
+        Just (pubkey, _) -> pubkey `versionCompatible` ver && satisfiesEcPredicate p pubkey
 
 -- Filters a list of candidate credentials with credentialMatchesHashSignatures.
 --
-- 
2.50.0

